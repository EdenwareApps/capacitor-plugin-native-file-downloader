{"version":3,"file":"implementation.js","sourceRoot":"","sources":["../../src/implementation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAejD,MAAM,eAAe,GAAG,cAAc,CAAwB,iBAAiB,EAAE;IAC/E,GAAG,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,kBAAkB,EAAE,CAAC;IAClE,QAAQ,EAAE,GAAG,EAAE,CAAE,MAAc,CAAC,uBAAuB,CAAC,OAAO,CAAC,eAAe;CAChF,CAAC,CAAC;AAEH,OAAO,EAAE,eAAe,EAAE,CAAC","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\nimport { registerPlugin } from '@capacitor/core';\n\nimport type { ChannelPayloadData, ChannelListenerCallback, StartOptions } from './definitions';\n\nexport interface CapacitorNodeJSPlugin {\n  start(args?: StartOptions): Promise<void>;\n  send(args: ChannelPayloadData): Promise<void>;\n  whenReady(): Promise<void>;\n\n  addListener(\n    eventName: string,\n    listenerFunc: ChannelListenerCallback,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n}\n\nconst CapacitorNodeJS = registerPlugin<CapacitorNodeJSPlugin>('CapacitorNodeJS', {\n  web: () => import('./web').then((m) => new m.CapacitorNodeJSWeb()),\n  electron: () => (window as any).CapacitorCustomPlatform.plugins.CapacitorNodeJS,\n});\n\nexport { CapacitorNodeJS };\n"]}